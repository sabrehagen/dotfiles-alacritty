# Configuration for Alacritty, the GPU enhanced terminal emulator.

# Any items in the `env` entry below will be added as
# environment variables. Some entries may override variables
# set by alacritty itself.
#env:
  # TERM variable
  #
  # This value is used to set the `$TERM` environment variable for
  # each instance of Alacritty. If it is not present, alacritty will
  # check the local terminfo database and use `alacritty` if it is
  # available, otherwise `xterm-256color` is used.
  #TERM: xterm-256color

window:

  # Window padding (changes require restart)
  #
  # Blank space added around the window in pixels. This padding is scaled
  # by DPI and the specified value is always added at both opposing sides.
  padding:
    x: 2
    y: 2

  # Spread additional padding evenly around the terminal content.
  dynamic_padding: false

  # Window decorations
  #
  # Values for `decorations`:
  #     - full: Borders and title bar
  #     - none: Neither borders nor title bar
  #
  # Values for `decorations` (macOS only):
  #     - buttonless: Title bar, transparent background and title bar buttons
  #     - transparent: Title bar, transparent background, but no title bar buttons
  decorations: none

  # When true, alacritty starts maximized.
  startup_mode: Windowed

scrolling:
  # Maximum number of lines in the scrollback buffer.
  # Specifying '0' will disable scrolling.
  history: 50000

  multiplier: 3

# Font configuration (changes require restart)
font:
  # Normal (roman) font face
  normal:
    # Font family
    #
    # Default:
    #   - (macOS) Menlo
    #   - (Linux) monospace
    #   - (Windows) Consolas
    family: DejaVuSansM Nerd Font

    # The `style` can be specified to pick a specific face.
    #style: Regular

  # Bold font face
  #bold:
    # Font family
    #
    # If the bold family is not specified, it will fall back to the
    # value specified for the normal font.
    #family: monospace

    # The `style` can be specified to pick a specific face.
    #style: Bold

  # Italic font face
  #italic:
    # Font family
    #
    # If the italic family is not specified, it will fall back to the
    # value specified for the normal font.
    #family: monospace

    # The `style` can be specified to pick a specific face.
    #style: Italic

  # Point size
  size: 6

  # Offset is the extra space around each character. `offset.y` can be thought of
  # as modifying the line spacing, and `offset.x` as modifying the letter spacing.
  offset:
    x: 0
    y: 0

  # Glyph offset determines the locations of the glyphs within their cells with
  # the default being at the bottom. Increasing `x` moves the glyph to the right,
  # increasing `y` moves the glyph upwards.
  glyph_offset:
    x: 0
    y: 0

shell:
  program: /bin/sh
  args:
    - -c
    - tmux new-session -s desktop-environment-shell-$(date +%s) -t desktop-environment-shell

import:
  - $HOME/.cache/wal/colors-alacritty.yml

colors:
  # If `true`, bold text is drawn using the bright color variants.
  draw_bold_text_with_bright_colors: true

# Visual Bell
#
# Any time the BEL code is received, Alacritty "rings" the visual bell. Once
# rung, the terminal background will be set to white and transition back to the
# default background color. You can control the rate of this transition by
# setting the `duration` property (represented in milliseconds). You can also
# configure the transition function by setting the `animation` property.
#
# Values for `animation`:
#   - Ease
#   - EaseOut
#   - EaseOutSine
#   - EaseOutQuad
#   - EaseOutCubic
#   - EaseOutQuart
#   - EaseOutQuint
#   - EaseOutExpo
#   - EaseOutCirc
#   - Linear
#
# Specifying a `duration` of `0` will disable the visual bell.
bell:
  animation: EaseOutExpo
  duration: 0
  color: '0xffffff'

# Mouse bindings
#
# Available fields:
#   - mouse
#   - action
#   - mods (optional)
#
# Values for `mouse`:
#   - Middle
#   - Left
#   - Right
#   - Numeric identifier such as `5`
#
# All available `mods` and `action` values are documented in the key binding
# section.
mouse:
  bindings:
    - { mouse: Middle, action: PasteSelection }

  # If this is `true`, the cursor is temporarily hidden when typing.
  hide_when_typing: false

selection:
  semantic_escape_chars: ",│`|:\"' ()[]{}<>"

  # When set to `true`, selected text will be copied to the primary clipboard.
  save_to_clipboard: false

cursor:
  # Cursor style
  #
  # Values for `style`:
  #   - ▇ Block
  #   - _ Underline
  #   - | Beam
  style: Block

  # If this is `true`, the cursor will be rendered as a hollow box when the
  # window is not focused.
  unfocused_hollow: true

# Live config reload (changes require restart)
live_config_reload: true

# Shell
#
# You can set `shell.program` to the path of your favorite shell, e.g. `/bin/fish`.
# Entries in `shell.args` are passed unmodified as arguments to the shell.
#
# Default:
#   - (Linux/macOS) /bin/bash --login
#   - (Windows) powershell
#shell:
#  program: /bin/bash
#  args:
#    - --login

# Key bindings
#
# Key bindings are specified as a list of objects. Each binding will specify a
# key and modifiers required to trigger it, terminal modes where the binding is
# applicable, and what should be done when the key binding fires. It can either
# send a byte sequence to the running application (`chars`), execute a
# predefined action (`action`) or fork and execute a specified command plus
# arguments (`command`).
#
# Bindings are always filled by default, but will be replaced when a new binding
# with the same triggers is defined. To unset a default binding, it can be
# mapped to the `None` action.
#
# Example:
#   `- { key: V, mods: Control|Shift, action: Paste }`
#
# Available fields:
#   - key
#   - mods (optional)
#   - chars | action | command (exactly one required)
#   - mode (optional)
#
# Values for `key`:
#   - `A` -> `Z`
#   - `F1` -> `F12`
#   - `Key1` -> `Key0`
#
#   A full list with available key codes can be found here:
#   https://docs.rs/glutin/*/glutin/enum.VirtualKeyCode.html#variants
#
#   Instead of using the name of the keys, the `key` field also supports using
#   the scancode of the desired key. Scancodes have to be specified as a
#   decimal number.
#   This command will allow you to display the hex scancodes for certain keys:
#     `showkey --scancodes`
#
# Values for `mods`:
#   - Command
#   - Control
#   - Super
#   - Shift
#   - Alt
#
#   Multiple `mods` can be combined using `|` like this: `mods: Control|Shift`.
#   Whitespace and capitalization is relevant and must match the example.
#
# Values for `chars`:
#   The `chars` field writes the specified string to the terminal. This makes
#   it possible to pass escape sequences.
#   To find escape codes for bindings like `PageUp` ("\x1b[5~"), you can run
#   the command `showkey -a` outside of tmux.
#   Note that applications use terminfo to map escape sequences back to
#   keys. It is therefore required to update the terminfo when
#   changing an escape sequence.
#
# Values for `action`:
#   - Paste
#   - PasteSelection
#   - Copy
#   - IncreaseFontSize
#   - DecreaseFontSize
#   - ResetFontSize
#   - ScrollPageUp
#   - ScrollPageDown
#   - ScrollToTop
#   - ScrollToBottom
#   - ClearHistory
#   - Hide
#   - Quit
#   - ClearLogNotice
#   - SpawnNewInstance
#   - None
#
# Values for `command`:
#   The `command` field must be a map containing a `program` string and
#   an `args` array of command line parameter strings.
#
#   Example:
#       `command: { program: "alacritty", args: ["-e", "vttest"] }`
#
# Values for `mode`:
#   - ~AppCursor
#   - AppCursor
#   - ~AppKeypad
#   - AppKeypad
keyboard:
  bindings:
    # (Windows/Linux only)
    #- { key: V,        mods: Control|Shift,    action: Paste               }
    #- { key: C,        mods: Control|Shift,    action: Copy                }
    #- { key: Insert,   mods: Shift,   action: PasteSelection               }
    #- { key: Key0,     mods: Control, action: ResetFontSize                }
    #- { key: Equals,   mods: Control, action: IncreaseFontSize             }
    #- { key: Subtract, mods: Control, action: DecreaseFontSize             }

    # (macOS only)
    #- { key: Key0,     mods: Command, action: ResetFontSize                }
    #- { key: Equals,   mods: Command, action: IncreaseFontSize             }
    #- { key: Minus,    mods: Command, action: DecreaseFontSize             }
    #- { key: K,        mods: Command, action: ClearHistory                 }
    #- { key: K,        mods: Command, chars: "\x0c"                        }
    #- { key: V,        mods: Command, action: Paste                        }
    #- { key: C,        mods: Command, action: Copy                         }
    #- { key: H,        mods: Command, action: Hide                         }
    #- { key: Q,        mods: Command, action: Quit                         }
    #- { key: W,        mods: Command, action: Quit                         }

    - { key: Paste,                   action: Paste                        }
    - { key: Copy,                    action: Copy                         }
    - { key: L,        mods: Control, chars: "\x0c"                        }
    - { key: Home,                    chars: "\x1bOH",   mode: AppCursor   }
    - { key: Home,                    chars: "\x1b[H",   mode: ~AppCursor  }
    - { key: End,                     chars: "\x1bOF",   mode: AppCursor   }
    - { key: End,                     chars: "\x1b[F",   mode: ~AppCursor  }
    - { key: PageUp,   mods: Shift,   chars: "\x1b[5;2~"                   }
    - { key: PageUp,   mods: Control, chars: "\x1b[5;5~"                   }
    - { key: PageUp,                  chars: "\x1b[5~"                     }
    - { key: PageDown, mods: Shift,   chars: "\x1b[6;2~"                   }
    - { key: PageDown, mods: Control, chars: "\x1b[6;5~"                   }
    - { key: PageDown,                chars: "\x1b[6~"                     }
    - { key: Tab,      mods: Shift,   chars: "\x1b[Z"                      }
    - { key: Back,                    chars: "\x7f"                        }
    - { key: Back,     mods: Alt,     chars: "\x1b\x7f"                    }
    - { key: Insert,                  chars: "\x1b[2~"                     }
    - { key: Delete,                  chars: "\x1b[3~"                     }
    - { key: Left,     mods: Shift,   chars: "\x1b[1;2D"                   }
    - { key: Left,     mods: Control, chars: "\x1b[1;5D"                   }
    - { key: Left,     mods: Alt,     chars: "\x1b[1;3D"                   }
    - { key: Left,                    chars: "\x1b[D",   mode: ~AppCursor  }
    - { key: Left,                    chars: "\x1bOD",   mode: AppCursor   }
    - { key: Right,    mods: Shift,   chars: "\x1b[1;2C"                   }
    - { key: Right,    mods: Control, chars: "\x1b[1;5C"                   }
    - { key: Right,    mods: Alt,     chars: "\x1b[1;3C"                   }
    - { key: Right,                   chars: "\x1b[C",   mode: ~AppCursor  }
    - { key: Right,                   chars: "\x1bOC",   mode: AppCursor   }
    - { key: Up,       mods: Shift,   chars: "\x1b[1;2A"                   }
    - { key: Up,       mods: Control, chars: "\x1b[1;5A"                   }
    - { key: Up,       mods: Alt,     chars: "\x1b[1;3A"                   }
    - { key: Up,                      chars: "\x1b[A",   mode: ~AppCursor  }
    - { key: Up,                      chars: "\x1bOA",   mode: AppCursor   }
    - { key: Down,     mods: Shift,   chars: "\x1b[1;2B"                   }
    - { key: Down,     mods: Control, chars: "\x1b[1;5B"                   }
    - { key: Down,     mods: Alt,     chars: "\x1b[1;3B"                   }
    - { key: Down,                    chars: "\x1b[B",   mode: ~AppCursor  }
    - { key: Down,                    chars: "\x1bOB",   mode: AppCursor   }
    - { key: F1,                      chars: "\x1bOP"                      }
    - { key: F2,                      chars: "\x1bOQ"                      }
    - { key: F3,                      chars: "\x1bOR"                      }
    - { key: F4,                      chars: "\x1bOS"                      }
    - { key: F5,                      chars: "\x1b[15~"                    }
    - { key: F6,                      chars: "\x1b[17~"                    }
    - { key: F7,                      chars: "\x1b[18~"                    }
    - { key: F8,                      chars: "\x1b[19~"                    }
    - { key: F9,                      chars: "\x1b[20~"                    }
    - { key: F10,                     chars: "\x1b[21~"                    }
    - { key: F11,                     chars: "\x1b[23~"                    }
    - { key: F12,                     chars: "\x1b[24~"                    }
    - { key: F1,       mods: Shift,   chars: "\x1b[1;2P"                   }
    - { key: F2,       mods: Shift,   chars: "\x1b[1;2Q"                   }
    - { key: F3,       mods: Shift,   chars: "\x1b[1;2R"                   }
    - { key: F4,       mods: Shift,   chars: "\x1b[1;2S"                   }
    - { key: F5,       mods: Shift,   chars: "\x1b[15;2~"                  }
    - { key: F6,       mods: Shift,   chars: "\x1b[17;2~"                  }
    - { key: F7,       mods: Shift,   chars: "\x1b[18;2~"                  }
    - { key: F8,       mods: Shift,   chars: "\x1b[19;2~"                  }
    - { key: F9,       mods: Shift,   chars: "\x1b[20;2~"                  }
    - { key: F10,      mods: Shift,   chars: "\x1b[21;2~"                  }
    - { key: F11,      mods: Shift,   chars: "\x1b[23;2~"                  }
    - { key: F12,      mods: Shift,   chars: "\x1b[24;2~"                  }
    - { key: F1,       mods: Control, chars: "\x1b[1;5P"                   }
    - { key: F2,       mods: Control, chars: "\x1b[1;5Q"                   }
    - { key: F3,       mods: Control, chars: "\x1b[1;5R"                   }
    - { key: F4,       mods: Control, chars: "\x1b[1;5S"                   }
    - { key: F5,       mods: Control, chars: "\x1b[15;5~"                  }
    - { key: F6,       mods: Control, chars: "\x1b[17;5~"                  }
    - { key: F7,       mods: Control, chars: "\x1b[18;5~"                  }
    - { key: F8,       mods: Control, chars: "\x1b[19;5~"                  }
    - { key: F9,       mods: Control, chars: "\x1b[20;5~"                  }
    - { key: F10,      mods: Control, chars: "\x1b[21;5~"                  }
    - { key: F11,      mods: Control, chars: "\x1b[23;5~"                  }
    - { key: F12,      mods: Control, chars: "\x1b[24;5~"                  }
    - { key: F1,       mods: Alt,     chars: "\x1b[1;6P"                   }
    - { key: F2,       mods: Alt,     chars: "\x1b[1;6Q"                   }
    - { key: F3,       mods: Alt,     chars: "\x1b[1;6R"                   }
    - { key: F4,       mods: Alt,     chars: "\x1b[1;6S"                   }
    - { key: F5,       mods: Alt,     chars: "\x1b[15;6~"                  }
    - { key: F6,       mods: Alt,     chars: "\x1b[17;6~"                  }
    - { key: F7,       mods: Alt,     chars: "\x1b[18;6~"                  }
    - { key: F8,       mods: Alt,     chars: "\x1b[19;6~"                  }
    - { key: F9,       mods: Alt,     chars: "\x1b[20;6~"                  }
    - { key: F10,      mods: Alt,     chars: "\x1b[21;6~"                  }
    - { key: F11,      mods: Alt,     chars: "\x1b[23;6~"                  }
    - { key: F12,      mods: Alt,     chars: "\x1b[24;6~"                  }
    - { key: F1,       mods: Super,   chars: "\x1b[1;3P"                   }
    - { key: F2,       mods: Super,   chars: "\x1b[1;3Q"                   }
    - { key: F3,       mods: Super,   chars: "\x1b[1;3R"                   }
    - { key: F4,       mods: Super,   chars: "\x1b[1;3S"                   }
    - { key: F5,       mods: Super,   chars: "\x1b[15;3~"                  }
    - { key: F6,       mods: Super,   chars: "\x1b[17;3~"                  }
    - { key: F7,       mods: Super,   chars: "\x1b[18;3~"                  }
    - { key: F8,       mods: Super,   chars: "\x1b[19;3~"                  }
    - { key: F9,       mods: Super,   chars: "\x1b[20;3~"                  }
    - { key: F10,      mods: Super,   chars: "\x1b[21;3~"                  }
    - { key: F11,      mods: Super,   chars: "\x1b[23;3~"                  }
    - { key: F12,      mods: Super,   chars: "\x1b[24;3~"                  }
    - { key: NumpadEnter,             chars: "\n"                          }

    # custom keybindings

    - { key: Up,       mods: Alt|Shift,       chars: "\x1b[1;4A"           }
    - { key: Down,     mods: Alt|Shift,       chars: "\x1b[1;4B"           }
    - { key: Right,    mods: Alt|Control,     chars: "\x1b[1;7C"           }
    - { key: Left,     mods: Alt|Control,     chars: "\x1b[1;7D"           }
    - { key: Right,    mods: Alt|Shift,       chars: "\x1b[1;4C"           }
    - { key: Left,     mods: Alt|Shift,       chars: "\x1b[1;4D"           }
    - { key: K,        mods: Alt|Shift,       chars: "\x1b[1;4A"           }
    - { key: J,        mods: Alt|Shift,       chars: "\x1b[1;4B"           }
    - { key: L,        mods: Alt|Shift,       chars: "\x1b[1;4C"           }
    - { key: H,        mods: Alt|Shift,       chars: "\x1b[1;4D"           }
    - { key: J,        mods: Control|Shift,   chars: "\x1b[1;5B"           }
    - { key: K,        mods: Control|Shift,   chars: "\x1b[1;5A"           }
    - { key: L,        mods: Control|Shift,   chars: "\x1b[1;5C"           }
    - { key: H,        mods: Control|Shift,   chars: "\x1b[1;5D"           }
